# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: ubuntu-16.04

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  persistCredentials: 'true'  # set to 'true' to leave the OAuth token in the Git config after the initial fetch

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  inputs:
    checkLatest: true
  displayName: 'Use Yarn 1.x'

- task: RestoreAndSaveCache@1
  inputs:
    keyfile: 'yarn.lock'
    targetfolder: 'node_modules'
    vstsFeed: '6654ebf6-4375-4685-93d3-3bfdbecde628'

# BEGIN - PR tasks
- task: PowerShell@2
  name: setTargetBranchVarStep
  inputs:
    targetType: 'inline'
    script: |
      $targetBranch = '$(System.PullRequest.TargetBranch)' -replace 'refs/heads/',''

      echo "##vso[task.setvariable variable=targetBranch;isOutput=true]$targetBranch"
    pwsh: true
  condition: in(variables['Build.Reason'], 'PullRequest')

- script: git checkout $(setTargetBranchVarStep.targetBranch)
  displayName: 'git checkout target branch'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- task: PowerShell@2
  name: setSourceBranchVarStep
  inputs:
    targetType: 'inline'
    script: |
      $sourceBranch = '$(System.PullRequest.SourceBranch)' -replace 'refs/heads/',''

      echo "##vso[task.setvariable variable=sourceBranch;isOutput=true]$sourceBranch"
    pwsh: true
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- script: git checkout $(setSourceBranchVarStep.sourceBranch)
  displayName: 'git checkout source branch'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- script: yarn install
  displayName: 'yarn install'
  condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))

- script: yarn format:check
  displayName: 'yarn format:check'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- script: yarn affected:lint
  displayName: 'yarn affected:lint'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- script: yarn affected:build --prod
  displayName: 'yarn affected:build --prod'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

- script: yarn affected:test
  displayName: 'yarn affected:test'
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))
# END - PR tasks

# BEGIN - CI tasks
- script: yarn lint
  displayName: 'yarn lint'
  condition: and(succeeded(), not(in(variables['Build.Reason'], 'PullRequest')))

- script: yarn build --prod
  displayName: 'yarn build --prod'
  condition: and(succeeded(), not(in(variables['Build.Reason'], 'PullRequest')))

- script: yarn test
  displayName: 'yarn test --watch=false'
  condition: and(succeeded(), not(in(variables['Build.Reason'], 'PullRequest')))
# END - CI tasks

- task: PublishPipelineArtifact@0
  inputs:
    targetPath: 'dist/apps/root-core'
